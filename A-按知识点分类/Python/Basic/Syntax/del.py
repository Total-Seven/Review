list = []
print(id(list))  # 2753454763264

del list
print(id(list))  # 140707880852624
# 第二次打印 id(list) 实际上是在尝试访问一个不存在的变量，这可能导致一个新的变量被创建并分配一个新的 id。

'''
在Python中,del 语句用于删除一个变量,但它并不会删除对象本身,而是删除了变量与对象之间的关联。
当您使用 del list 删除变量 list 后,变量 list 不再存在,但实际的空列表对象仍然存在于内存中。

因此,尽管您删除了变量 list,但是您仍然可以通过创建一个新的变量 list,来引用同一个空列表对象,
并且该空列表对象的 id 没有改变,因为对象本身并没有被销毁。

这是Python中对象管理的一种方式,使得内存管理更加高效。
删除变量只是删除了对对象的引用,而不是立即销毁对象。对象会在没有任何引用指向它时被自动垃圾回收。
'''
